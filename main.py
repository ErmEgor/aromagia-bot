import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not CHANNEL_ID:
    raise ValueError(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ CHANNEL_ID"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")]]
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (FSM) ---

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∑—ã–≤–∞
class ReviewState(StatesGroup):
    waiting_for_review_text = State()
    waiting_for_rating = State()
    waiting_for_anonymity_choice = State()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é ¬´–ê—Ä–æ–º–∞–≥–∏—è¬ª!</b>\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤. "
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å, –≤–µ–¥—å –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ! ‚òïÔ∏è‚ú®\n\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=main_kb,
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫ ---

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å'.
    """
    await message.answer(
        "<b>–ö–æ—Ñ–µ–π–Ω—è ¬´–ê—Ä–æ–º–∞–≥–∏—è¬ª</b> ‚Äî —ç—Ç–æ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –∫–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –∫–æ—Ñ–µ "
        "–Ω–∞–ø–æ–ª–Ω–µ–Ω –≤–æ–ª—à–µ–±—Å—Ç–≤–æ–º.\n\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–µ–æ–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –∑–µ—Ä–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∏–º –Ω–∞–ø–∏—Ç–∫–∏ —Å –ª—é–±–æ–≤—å—é. "
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è"
    )


@dp.message(F.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_review(message: types.Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞.
    """
    await state.set_state(ReviewState.waiting_for_review_text)
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.",
        reply_markup=cancel_kb,
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏) ---

@dp.callback_query(F.data == "cancel_review")
async def cancel_review_handler(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.
    """
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer()
        return

    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback.message.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

@dp.message(ReviewState.waiting_for_review_text)
async def process_review_text(message: types.Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É.
    """
    if not message.text or len(message.text) < 10:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ (—Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=cancel_kb
        )
        return

    await state.update_data(review_text=message.text)
    await state.set_state(ReviewState.waiting_for_rating)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
    rating_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠êÔ∏è", callback_data="rating_1"),
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_2"),
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_3"),
            ],
            [
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_4"),
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠ê", callback_data="rating_5"),
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")],
        ]
    )
    await message.answer("‚ú® –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å:", reply_markup=rating_kb)


@dp.callback_query(ReviewState.waiting_for_rating, F.data.startswith("rating_"))
async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å.
    """
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)
    await state.set_state(ReviewState.waiting_for_anonymity_choice)

    anonymity_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üë§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å –º–æ–∏–º –∏–º–µ–Ω–µ–º", callback_data="anon_no"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé≠ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data="anon_yes"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")],
        ]
    )
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤?", reply_markup=anonymity_kb
    )
    await callback.answer()


@dp.callback_query(
    ReviewState.waiting_for_anonymity_choice, F.data.startswith("anon_")
)
async def process_anonymity_and_publish(
    callback: types.CallbackQuery, state: FSMContext
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ—Ç–∑—ã–≤.
    """
    is_anonymous = callback.data == "anon_yes"
    user_data = await state.get_data()
    await state.clear()

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
    rating_stars = "‚≠ê" * user_data["rating"] + "‚òÜ" * (5 - user_data["rating"])
    review_text_formatted = (
        f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b> ‚ú®\n\n"
        f"<b>–û—Ü–µ–Ω–∫–∞:</b> {rating_stars}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n"
        f"<i>{user_data['review_text']}</i>\n\n"
    )

    if is_anonymous:
        review_text_formatted += "üë§ <i>–û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ.</i>"
    else:
        user = callback.from_user
        username = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        review_text_formatted += (
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {user.full_name} (ID: {user.id}, Username: {username})"
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=review_text_formatted)
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {callback.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
        await callback.message.edit_text(
            "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
            "–û–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!",
            reply_markup=None,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
        await callback.message.edit_text(
            "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤. "
            "–í–æ–∑–º–æ–∂–Ω–æ, —è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
            reply_markup=None,
        )

    await callback.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)
    await callback.answer()


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ
    await bot.delete_webhook(drop_pending_updates=True)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")