import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–±—Ö—É–∫–∞
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
###

from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
# Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è RENDER_EXTERNAL_URL
# –õ–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ngrok –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏
BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
# –ü—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
# –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
###

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
if not BOT_TOKEN or not CHANNEL_ID:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏ CHANNEL_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, stream=sys.stdout)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
    ],
    resize_keyboard=True,
    one_time_keyboard=False,
)
cancel_kb = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")]]
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class ReviewState(StatesGroup):
    waiting_for_review_text = State()
    waiting_for_rating = State()
    waiting_for_anonymity_choice = State()

# --- –í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫) –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
# ... (–∑–¥–µ—Å—å –≤–µ—Å—å –≤–∞—à –∫–æ–¥ —Å cmd_start, about_us, start_review –∏ —Ç.–¥.) ...
# –Ø –∏—Ö —Å–∫—Ä—ã–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –∫–∞–∫ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ.

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é ¬´–ê—Ä–æ–º–∞–≥–∏—è¬ª!</b>\n\n"
        "–Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤. "
        "–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å, –≤–µ–¥—å –æ–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ! ‚òïÔ∏è‚ú®\n\n"
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=main_kb,
    )

@dp.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: types.Message):
    await message.answer(
        "<b>–ö–æ—Ñ–µ–π–Ω—è ¬´–ê—Ä–æ–º–∞–≥–∏—è¬ª</b> ‚Äî —ç—Ç–æ —É—é—Ç–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –∫–∞–∂–¥—ã–π –≥–ª–æ—Ç–æ–∫ –∫–æ—Ñ–µ "
        "–Ω–∞–ø–æ–ª–Ω–µ–Ω –≤–æ–ª—à–µ–±—Å—Ç–≤–æ–º.\n\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–µ–æ–±–∂–∞—Ä–µ–Ω–Ω—ã–µ –∑–µ—Ä–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∏–º –Ω–∞–ø–∏—Ç–∫–∏ —Å –ª—é–±–æ–≤—å—é. "
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! ‚ù§Ô∏è"
    )

@dp.message(F.text == "‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def start_review(message: types.Message, state: FSMContext):
    await state.set_state(ReviewState.waiting_for_review_text)
    await message.answer(
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å.",
        reply_markup=cancel_kb,
    )

@dp.callback_query(F.data == "cancel_review")
async def cancel_review_handler(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await callback.answer()
        return
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await callback.message.answer("–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)
    await callback.answer()

@dp.message(ReviewState.waiting_for_review_text)
async def process_review_text(message: types.Message, state: FSMContext):
    if not message.text or len(message.text) < 10:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ (—Ö–æ—Ç—è –±—ã 10 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=cancel_kb
        )
        return
    await state.update_data(review_text=message.text)
    await state.set_state(ReviewState.waiting_for_rating)
    rating_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚≠êÔ∏è", callback_data="rating_1"),
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_2"),
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_3"),
            ],
            [
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è", callback_data="rating_4"),
                InlineKeyboardButton(text="‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠ê", callback_data="rating_5"),
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")],
        ]
    )
    await message.answer("‚ú® –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å:", reply_markup=rating_kb)

@dp.callback_query(ReviewState.waiting_for_rating, F.data.startswith("rating_"))
async def process_rating(callback: types.CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)
    await state.set_state(ReviewState.waiting_for_anonymity_choice)
    anonymity_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üë§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å –º–æ–∏–º –∏–º–µ–Ω–µ–º", callback_data="anon_no")
            ],
            [
                InlineKeyboardButton(text="üé≠ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ", callback_data="anon_yes")
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_review")],
        ]
    )
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤?", reply_markup=anonymity_kb)
    await callback.answer()

@dp.callback_query(ReviewState.waiting_for_anonymity_choice, F.data.startswith("anon_"))
async def process_anonymity_and_publish(callback: types.CallbackQuery, state: FSMContext):
    is_anonymous = callback.data == "anon_yes"
    user_data = await state.get_data()
    await state.clear()
    rating_stars = "‚≠ê" * user_data["rating"] + "‚òÜ" * (5 - user_data["rating"])
    review_text_formatted = (
        f"<b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b> ‚ú®\n\n"
        f"<b>–û—Ü–µ–Ω–∫–∞:</b> {rating_stars}\n\n"
        f"<b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>\n"
        f"<i>{user_data['review_text']}</i>\n\n"
    )
    if is_anonymous:
        review_text_formatted += "üë§ <i>–û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ.</i>"
    else:
        user = callback.from_user
        username = f"@{user.username}" if user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        review_text_formatted += (
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {user.full_name} (ID: {user.id}, Username: {username})"
        )
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=review_text_formatted)
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç {callback.from_user.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
        await callback.message.edit_text(
            "üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
            "–û–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!",
            reply_markup=None,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
        await callback.message.edit_text(
            "üòî <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
            reply_markup=None,
        )
    await callback.message.answer("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_kb)
    await callback.answer()

# --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ ---

### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_startup(bot: Bot):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await bot.set_webhook(WEBHOOK_URL, secret_token=BOT_TOKEN)
    logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: {WEBHOOK_URL}")


### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def on_shutdown(bot: Bot):
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    await bot.delete_webhook()
    logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω.")


### –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main
def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ startup –∏ shutdown
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=BOT_TOKEN,
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ –Ω–∞—à–µ–º—É –ø—É—Ç–∏
    webhook_requests_handler.register(app, path=WEBHOOK_PATH)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    setup_application(app, dp, bot=bot)
    
    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8080
    port = int(os.environ.get('PORT', 8080))
    web.run_app(app, host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()